/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { catchError, switchMap } from 'rxjs/operators';
import { NbFirebaseBaseStrategy } from '../base/firebase-base.strategy';
import { NbFirebaseIdentityProviderStrategyOptions } from '../base/firebase-identity-provider-strategy.options';
import firebase from 'firebase/compat/app';
import 'firebase/compat/auth';
import * as i0 from "@angular/core";
export class NbFirebaseFacebookStrategy extends NbFirebaseBaseStrategy {
    constructor() {
        super(...arguments);
        this.defaultOptions = new NbFirebaseIdentityProviderStrategyOptions();
    }
    static setup(options) {
        return [NbFirebaseFacebookStrategy, options];
    }
    authenticate(data) {
        const module = 'authenticate';
        const provider = new firebase.auth.FacebookAuthProvider();
        const scopes = this.getOption('scopes');
        scopes.forEach((scope) => provider.addScope(scope));
        provider.setCustomParameters(this.getOption('customParameters'));
        return from(this.afAuth.signInWithPopup(provider)).pipe(switchMap((res) => this.processSuccess(res, module)), catchError((error) => this.processFailure(error, module)));
    }
}
NbFirebaseFacebookStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NbFirebaseFacebookStrategy, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
NbFirebaseFacebookStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NbFirebaseFacebookStrategy });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NbFirebaseFacebookStrategy, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWJhc2UtZmFjZWJvb2suc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2ZpcmViYXNlLWF1dGgvc3RyYXRlZ2llcy9mYWNlYm9vay9maXJlYmFzZS1mYWNlYm9vay5zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsSUFBSSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDeEUsT0FBTyxFQUFFLHlDQUF5QyxFQUFFLE1BQU0scURBQXFELENBQUM7QUFFaEgsT0FBTyxRQUFRLE1BQU0scUJBQXFCLENBQUM7QUFDM0MsT0FBTyxzQkFBc0IsQ0FBQzs7QUFHOUIsTUFBTSxPQUFPLDBCQUEyQixTQUFRLHNCQUFzQjtJQUR0RTs7UUFFWSxtQkFBYyxHQUE4QyxJQUFJLHlDQUF5QyxFQUFFLENBQUM7S0FrQnZIO0lBaEJDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBa0Q7UUFDN0QsT0FBTyxDQUFDLDBCQUEwQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBVTtRQUNyQixNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUM7UUFDOUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDMUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDcEQsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBRWpFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNyRCxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQ3BELFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FDMUQsQ0FBQztJQUNKLENBQUM7O3VIQWxCVSwwQkFBMEI7MkhBQTFCLDBCQUEwQjsyRkFBMUIsMEJBQTBCO2tCQUR0QyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYkF1dGhSZXN1bHQsIE5iQXV0aFN0cmF0ZWd5Q2xhc3MsIE5iQXV0aFN0cmF0ZWd5T3B0aW9ucyB9IGZyb20gJ0BuZWJ1bGFyL2F1dGgnO1xuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBOYkZpcmViYXNlQmFzZVN0cmF0ZWd5IH0gZnJvbSAnLi4vYmFzZS9maXJlYmFzZS1iYXNlLnN0cmF0ZWd5JztcbmltcG9ydCB7IE5iRmlyZWJhc2VJZGVudGl0eVByb3ZpZGVyU3RyYXRlZ3lPcHRpb25zIH0gZnJvbSAnLi4vYmFzZS9maXJlYmFzZS1pZGVudGl0eS1wcm92aWRlci1zdHJhdGVneS5vcHRpb25zJztcblxuaW1wb3J0IGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlL2NvbXBhdC9hcHAnO1xuaW1wb3J0ICdmaXJlYmFzZS9jb21wYXQvYXV0aCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOYkZpcmViYXNlRmFjZWJvb2tTdHJhdGVneSBleHRlbmRzIE5iRmlyZWJhc2VCYXNlU3RyYXRlZ3kge1xuICBwcm90ZWN0ZWQgZGVmYXVsdE9wdGlvbnM6IE5iRmlyZWJhc2VJZGVudGl0eVByb3ZpZGVyU3RyYXRlZ3lPcHRpb25zID0gbmV3IE5iRmlyZWJhc2VJZGVudGl0eVByb3ZpZGVyU3RyYXRlZ3lPcHRpb25zKCk7XG5cbiAgc3RhdGljIHNldHVwKG9wdGlvbnM6IE5iRmlyZWJhc2VJZGVudGl0eVByb3ZpZGVyU3RyYXRlZ3lPcHRpb25zKTogW05iQXV0aFN0cmF0ZWd5Q2xhc3MsIE5iQXV0aFN0cmF0ZWd5T3B0aW9uc10ge1xuICAgIHJldHVybiBbTmJGaXJlYmFzZUZhY2Vib29rU3RyYXRlZ3ksIG9wdGlvbnNdO1xuICB9XG5cbiAgYXV0aGVudGljYXRlKGRhdGE/OiBhbnkpOiBPYnNlcnZhYmxlPE5iQXV0aFJlc3VsdD4ge1xuICAgIGNvbnN0IG1vZHVsZSA9ICdhdXRoZW50aWNhdGUnO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IGZpcmViYXNlLmF1dGguRmFjZWJvb2tBdXRoUHJvdmlkZXIoKTtcbiAgICBjb25zdCBzY29wZXMgPSB0aGlzLmdldE9wdGlvbignc2NvcGVzJyk7XG4gICAgc2NvcGVzLmZvckVhY2goKHNjb3BlKSA9PiBwcm92aWRlci5hZGRTY29wZShzY29wZSkpO1xuICAgIHByb3ZpZGVyLnNldEN1c3RvbVBhcmFtZXRlcnModGhpcy5nZXRPcHRpb24oJ2N1c3RvbVBhcmFtZXRlcnMnKSk7XG5cbiAgICByZXR1cm4gZnJvbSh0aGlzLmFmQXV0aC5zaWduSW5XaXRoUG9wdXAocHJvdmlkZXIpKS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChyZXMpID0+IHRoaXMucHJvY2Vzc1N1Y2Nlc3MocmVzLCBtb2R1bGUpKSxcbiAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PiB0aGlzLnByb2Nlc3NGYWlsdXJlKGVycm9yLCBtb2R1bGUpKSxcbiAgICApO1xuICB9XG59XG4iXX0=